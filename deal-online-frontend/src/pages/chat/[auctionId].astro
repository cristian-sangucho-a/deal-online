---
export const prerender = false;

import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import { api } from '../../services/api.js';

const { auctionId } = Astro.params;

let auction = null;
let error = null;

// Obtener la URL de WebSocket desde las variables de entorno
const WS_URL = import.meta.env.PUBLIC_WS_URL || 'https://api-gateway-gdwfddukda-rj.a.run.app';

console.log('üîç Attempting to load auction with ID:', auctionId);
console.log('üîß WebSocket URL configurada:', WS_URL);
auction = await api.getAuctionById(auctionId);
console.log(auction);


if (!auction && !error) {
  console.log('üö´ No auction found and no error, redirecting to 404');
  return Astro.redirect('/404');
}
---

<Layout title={auction ? `Chat - ${auction.product?.name || 'Subasta'}` : 'Chat no encontrado'}>
  <Header />
  
  {error ? (
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12 text-center">
      <h1 class="text-2xl font-bold text-gray-900 mb-4">Error al cargar el chat</h1>
      <p class="text-gray-600 mb-6">{error}</p>
      <p class="text-sm text-gray-500 mb-4">Auction ID: {auctionId}</p>
      <a href="/products" class="text-primary-600 hover:text-primary-500">‚Üê Volver a productos</a>
    </div>
  ) : (
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Header -->
      <div class="mb-6">
        <nav class="mb-4">
          <ol class="flex items-center space-x-2 text-sm text-gray-500">
            <li><a href="/" class="hover:text-gray-700">Inicio</a></li>
            <li><span>‚Üí</span></li>
            <li><a href="/products" class="hover:text-gray-700">Productos</a></li>
            <li><span>‚Üí</span></li>
            <li class="text-gray-900">Chat de Subasta</li>
          </ol>
        </nav>
      </div>

      <!-- Auction Info Card -->
      <div class="bg-white rounded-lg shadow-sm border p-6 mb-6">
        <div class="flex items-start space-x-4">
          <img 
            src={auction.product?.image_url || 'https://images.pexels.com/photos/4465124/pexels-photo-4465124.jpeg?auto=compress&cs=tinysrgb&w=200'} 
            alt={auction.product?.name || 'Producto'}
            class="w-20 h-20 object-cover rounded-lg"
          />
          <div class="flex-1">
            <h1 class="text-2xl font-bold text-gray-900 mb-2">
              {auction.product?.name || 'Producto'}
            </h1>
            <p class="text-gray-600 text-sm mb-3 line-clamp-2">{auction.product?.description || 'Sin descripci√≥n'}</p>
            
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div>
                <span class="text-sm text-gray-500">Precio actual</span>
                <p id="current-price" class="font-bold text-xl text-primary-600">
                  ${parseFloat(auction.current_price || 0).toLocaleString()}
                </p>
              </div>
              
              {auction.status === 'active' && auction.end_time && (
                <div>
                  <span class="text-sm text-gray-500">Tiempo restante</span>
                  <p id="countdown" class="font-semibold text-gray-900"></p>
                </div>
              )}
              
              <div>
                <span class="text-sm text-gray-500">Estado</span>
                <p class={`font-medium ${
                  auction.status === 'active' ? 'text-success-600' : 'text-gray-600'
                }`}>
                  {auction.status === 'active' ? 'Activa' : 'Finalizada'}
                </p>
              </div>
              
              <div>
                <span class="text-sm text-gray-500">Vendedor</span>
                <p class="font-medium text-gray-900">{auction.product?.seller?.nombre || 'Usuario'}</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Bid Form -->
      {auction.status === 'active' && (
        <div class="bg-gradient-to-r from-primary-50 to-accent-50 rounded-lg p-6 mb-6">
          <h2 class="text-lg font-semibold text-gray-900 mb-4">Hacer una Oferta</h2>
          
          <div id="auth-required" class="hidden text-center py-8">
            <p class="text-gray-600 mb-4">Debes iniciar sesi√≥n para hacer ofertas</p>
            <a href="/login" class="bg-primary-500 text-white px-6 py-2 rounded-lg hover:bg-primary-600 transition-colors">
              Iniciar Sesi√≥n
            </a>
          </div>

          <form id="bid-form" class="space-y-4">
            <div class="flex items-end space-x-3">
              <div class="flex-1">
                <label for="bid-amount" class="block text-sm font-medium text-gray-700 mb-1">
                  Tu oferta (m√≠nimo: $${(parseFloat(auction.current_price) + 0.01).toFixed(2)})
                </label>
                <div class="relative">
                  <span class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">$</span>
                  <input
                    type="number"
                    id="bid-amount"
                    step="0.01"
                    min={(parseFloat(auction.current_price) + 0.01).toFixed(2)}
                    class="w-full pl-8 pr-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-lg"
                    placeholder={(parseFloat(auction.current_price) + 1).toFixed(2)}
                    required
                  />
                </div>
              </div>
              
              <button
                type="submit"
                id="bid-button"
                class="bg-primary-500 text-white px-6 py-3 rounded-lg hover:bg-primary-600 transition-colors font-medium disabled:opacity-50 disabled:cursor-not-allowed disabled:bg-gray-400"
              >
                <span id="bid-button-text">Ofertar</span>
              </button>
            </div>
          </form>
        </div>
      )}

      <!-- Chat Section -->
      <div class="bg-white rounded-lg shadow-sm border overflow-hidden">
        <div class="bg-gray-50 px-6 py-3 border-b">
          <h2 class="text-lg font-semibold text-gray-900">Chat de la Subasta</h2>
        </div>
        
        <!-- Messages Container -->
        <div id="messages-container" class="h-96 overflow-y-auto p-4 space-y-3">
          <div class="text-center text-gray-500 text-sm">
            Cargando mensajes...
          </div>
        </div>
        
        <!-- Message Input -->
        <div class="border-t bg-gray-50 p-4">
          <div id="message-auth-required" class="hidden text-center text-gray-600">
            <p>Debes iniciar sesi√≥n para participar en el chat</p>
          </div>
          
          <form id="message-form" class="flex space-x-2">
            <input
              type="text"
              id="message-input"
              placeholder="Escribe un mensaje..."
              class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
              maxlength="500"
            />
            <button
              type="submit"
              class="bg-primary-500 text-white px-4 py-2 rounded-lg hover:bg-primary-600 transition-colors"
            >
              Enviar
            </button>
          </form>
        </div>
      </div>

      <!-- Quick Actions -->
      <div class="mt-6 flex justify-center space-x-4">
        <a 
          href={`/products/${auction.product?.id || ''}`}
          class="text-primary-600 hover:text-primary-500 font-medium"
        >
          Ver detalles del producto
        </a>
        <span class="text-gray-300">‚Ä¢</span>
        <a 
          href="/products"
          class="text-gray-600 hover:text-gray-500"
        >
          Ver otros productos
        </a>
      </div>
    </div>
  )}
</Layout>

<script define:vars={{ auction, WS_URL }}>
  // Import stores and services
  let $user, $token, api, io;
  
  // WebSocket connections
  let chatSocket = null;
  let auctionSocket = null;
  let isConnected = false;
  let isApiReady = false;

  // Initialize everything
  async function init() {
    try {
      // Import dependencies using dynamic imports
      const authStoreModule = await import('/src/stores/authStore.js');
      $user = authStoreModule.$user;
      $token = authStoreModule.$token;
      
      const apiModule = await import('/src/services/api.js');
      api = apiModule.api;
      
      // Verify API is loaded correctly
      console.log('üîß API loaded:', !!api);
      console.log('üîß placeBid method available:', typeof api.placeBid);
      
      // Mark API as ready
      isApiReady = !!api && typeof api.placeBid === 'function';
      console.log('üîß API ready:', isApiReady);
      
      // Import Socket.IO from CDN since it might not be available as ES module
      if (!window.io) {
        const script = document.createElement('script');
        script.src = 'https://cdn.socket.io/4.7.4/socket.io.min.js';
        document.head.appendChild(script);
        
        // Wait for Socket.IO to load
        await new Promise((resolve, reject) => {
          script.onload = resolve;
          script.onerror = reject;
        });
      }
      
      io = window.io;
      
      // Check authentication
      checkAuth();
      
      // Initialize WebSockets if authenticated (solo para chat y actualizaciones)
      const token = $token.get();
      if (token) {
        initWebSockets(token);
      }
      
      // Update auth UI after API is loaded
      checkAuth();
      
      // Initialize countdown
      if (auction?.status === 'active' && auction?.end_time) {
        updateCountdown();
        setInterval(updateCountdown, 1000);
      }
      
    } catch (error) {
      console.error('Error initializing:', error);
    }
  }

  // Check authentication status
  function checkAuth() {
    const token = $token.get();
    const user = $user.get();

    const bidForm = document.getElementById('bid-form');
    const authRequired = document.getElementById('auth-required');
    const messageForm = document.getElementById('message-form');
    const messageAuthRequired = document.getElementById('message-auth-required');
    const bidButton = document.getElementById('bid-button');
    const bidAmount = document.getElementById('bid-amount');

    if (token && user) {
      bidForm?.classList.remove('hidden');
      authRequired?.classList.add('hidden');
      messageForm?.classList.remove('hidden');
      messageAuthRequired?.classList.add('hidden');
      
      // Habilitar formulario de ofertas si hay token v√°lido y API est√° lista
      if (bidAmount) bidAmount.disabled = !isApiReady;
      if (bidButton) {
        bidButton.disabled = !isApiReady;
        if (!isApiReady) {
          bidButton.textContent = 'Cargando...';
        } else {
          bidButton.textContent = 'Ofertar';
        }
      }
    } else {
      bidForm?.classList.add('hidden');
      authRequired?.classList.remove('hidden');
      messageForm?.classList.add('hidden');
      messageAuthRequired?.classList.remove('hidden');
      
      // Deshabilitar formulario de ofertas
      if (bidButton) bidButton.disabled = true;
      if (bidAmount) bidAmount.disabled = true;
    }
  }

  // Initialize WebSocket connections (Chat + Auction)
  function initWebSockets(token) {
    try {
      console.log('üîß Conectando a WebSocket URL:', WS_URL);
      
      // Configuraci√≥n com√∫n para ambos servicios
      const commonConfig = {
        auth: { token },
        cors: { origin: '*' },
        transports: ['websocket'],
        upgrade: false,
        rememberUpgrade: false
      };

      // === CHAT SERVICE CONNECTION ===
      chatSocket = io(WS_URL, {
        ...commonConfig,
        path: '/chat/socket.io'
      });

      chatSocket.on('connect', () => {
        console.log('‚úÖ Conectado al Chat Service:', chatSocket.id);
        
        // Join chat room
        console.log('üì§ Enviando join_chat_room...', { auctionId: auction.id });
        chatSocket.emit('join_chat_room', { auctionId: auction.id });
      });

      chatSocket.on('disconnect', () => {
        console.log('‚ùå Desconectado del Chat Service');
      });

      chatSocket.on('joined_chat_room', (data) => {
        console.log('üè† Se uni√≥ a la sala de chat:', data);
        isConnected = true;
      });

      chatSocket.on('new_message', (message) => {
        console.log('ÔøΩ Nuevo mensaje:', message);
        addMessage(message);
      });

      chatSocket.on('connect_error', (error) => {
        console.error('ÔøΩ Error de conexi√≥n al Chat:', error);
        updateConnectionStatus('Error de conexi√≥n');
      });

      chatSocket.on('error', (error) => {
        console.error('‚ùå Chat Socket error:', error);
        console.log('üö® Error:', error.message || error);
      });

      // === AUCTION SERVICE CONNECTION ===
      auctionSocket = io(WS_URL, {
        ...commonConfig,
        path: '/auction/socket.io'
      });

      auctionSocket.on('connect', () => {
        console.log('‚úÖ Conectado al Auction Service:', auctionSocket.id);
        
        // Join auction room
        console.log('üì§ Enviando join_auction...', { auctionId: auction.id });
        auctionSocket.emit('join_auction', { auctionId: auction.id });
      });

      auctionSocket.on('disconnect', () => {
        console.log('‚ùå Desconectado del Auction Service');
      });

      auctionSocket.on('joined_auction', (data) => {
        console.log('üè† Se uni√≥ a la sala de subasta:', data);
      });

      auctionSocket.on('new_bid', (bidData) => {
        console.log('üí∞ Nueva oferta recibida:', bidData);
        
        // Solo actualizar si la oferta no es nuestra (para evitar duplicados)
        const user = $user.get();
        if (bidData.userId !== user?.id) {
          updateCurrentPrice(bidData.amount);
          addBidMessage(bidData);
          
          // Mostrar notificaci√≥n de nueva oferta
          addSystemMessage(`${bidData.username} hizo una oferta de $${parseFloat(bidData.amount).toLocaleString()}`);
        }
      });

      auctionSocket.on('price_update', (data) => {
        console.log('üí≤ Actualizaci√≥n de precio:', data);
        
        // Actualizar precio actual y formulario
        if (data.newPrice && data.newPrice > auction.current_price) {
          updateCurrentPrice(data.newPrice);
          auction.current_price = data.newPrice;
        }
      });

      auctionSocket.on('connect_error', (error) => {
        console.error('üîå Error de conexi√≥n al Auction:', error);
      });

      auctionSocket.on('error', (error) => {
        console.error('‚ùå Auction Socket error:', error);
        console.log('üö® Error:', error.message || error);
      });

    } catch (error) {
      console.error('Error initializing WebSockets:', error);
    }
  }

  // Update current price
  function updateCurrentPrice(price) {
    const priceEl = document.getElementById('current-price');
    if (priceEl) {
      priceEl.textContent = `$${parseFloat(price || 0).toLocaleString()}`;
    }
    
    // Update minimum bid amount
    const bidInput = document.getElementById('bid-amount');
    if (bidInput) {
      const minBid = parseFloat(price || 0) + 0.01;
      bidInput.min = minBid.toFixed(2);
      bidInput.step = "0.01";
      bidInput.placeholder = (minBid + 1).toFixed(2);
      
      const label = document.querySelector('label[for="bid-amount"]');
      if (label) {
        label.textContent = `Tu oferta (m√≠nimo: $${minBid.toFixed(2)})`;
      }
    }
    
    // Update auction current price
    auction.current_price = price;
  }

  // Display messages
  function displayMessages(messages) {
    const container = document.getElementById('messages-container');
    if (!container) return;
    
    container.innerHTML = '';
    
    if (!messages || messages.length === 0) {
      container.innerHTML = '<div class="text-center text-gray-500 text-sm">No hay mensajes a√∫n. ¬°S√© el primero en escribir!</div>';
      return;
    }
    
    messages.forEach(message => {
      addMessage(message, false); // false = don't scroll to bottom for initial load
    });
    
    // Scroll to bottom after loading all messages
    container.scrollTop = container.scrollHeight;
  }

  // Add message to chat
  function addMessage(message, scrollToBottom = true) {
    const container = document.getElementById('messages-container');
    if (!container) return;

    const messageEl = document.createElement('div');
    messageEl.className = 'flex items-start space-x-3';

    const isSystem = message.userId === 'system' || message.type === 'system';
    const isBid = message.type === 'bid' || message.is_bid;

    if (isSystem) {
      messageEl.innerHTML = `
        <div class="flex-1 text-center">
          <p class="text-sm text-gray-500 italic">${message.message}</p>
        </div>
      `;
    } else {
      const timestamp = message.timestamp || message.created_at || message.createdAt;
      const timeString = timestamp ? new Date(timestamp).toLocaleTimeString() : '';
      
      messageEl.innerHTML = `
        <div class="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center flex-shrink-0">
          <span class="text-xs font-medium text-gray-700">
            ${(message.username || message.user?.nombre || 'U').charAt(0).toUpperCase()}
          </span>
        </div>
        <div class="flex-1 min-w-0">
          <div class="flex items-center space-x-2">
            <p class="font-medium text-gray-900 text-sm">${message.username || message.user?.nombre || 'Usuario'}</p>
            ${timeString ? `<p class="text-xs text-gray-500">${timeString}</p>` : ''}
            ${isBid ? '<span class="bg-primary-100 text-primary-800 text-xs px-2 py-1 rounded">Oferta</span>' : ''}
          </div>
          <p class="text-gray-700 text-sm mt-1 ${isBid ? 'font-semibold' : ''}">${message.message}</p>
        </div>
      `;
    }

    container.appendChild(messageEl);

    if (scrollToBottom) {
      container.scrollTop = container.scrollHeight;
    }
  }

  // Add bid message
  function addBidMessage(bidData) {
    addMessage({
      userId: bidData.userId,
      username: bidData.username,
      message: `Hizo una oferta de $${parseFloat(bidData.bidAmount || bidData.amount || 0).toLocaleString()}`,
      timestamp: bidData.timestamp || new Date().toISOString(),
      type: 'bid'
    });
  }

  // Add system message
  function addSystemMessage(message) {
    addMessage({
      userId: 'system',
      username: 'Sistema',
      message: message,
      timestamp: new Date().toISOString(),
      type: 'system'
    });
  }

  // Update countdown timer
  function updateCountdown() {
    if (!auction || auction.status !== 'active' || !auction.end_time) return;
    
    const endTime = new Date(auction.end_time);
    const now = new Date();
    const diff = endTime.getTime() - now.getTime();
    
    const countdownEl = document.getElementById('countdown');
    if (!countdownEl) return;
    
    if (diff <= 0) {
      countdownEl.textContent = 'Finalizada';
      countdownEl.className = 'font-semibold text-error-600';
      return;
    }
    
    const totalHours = Math.floor(diff / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((diff % (1000 * 60)) / 1000);

    const timeString = `${totalHours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    
    countdownEl.textContent = timeString;
    
    if (totalHours < 1) {
      countdownEl.className = 'font-semibold text-error-600 animate-pulse';
    }
  }

  // Event handlers
  document.addEventListener('DOMContentLoaded', () => {
    init();

    // Ejecutar checkAuth despu√©s de un peque√±o delay para asegurar que el DOM est√© listo
    setTimeout(checkAuth, 100);

    // Bid form handler
    const bidForm = document.getElementById('bid-form');
    if (bidForm) {
      bidForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const amountInput = document.getElementById('bid-amount');
        const bidButton = document.getElementById('bid-button');
        
        if (!amountInput) {
          alert('Error en el formulario. Por favor, recarga la p√°gina.');
          return;
        }
        
        if (!isApiReady || !api || typeof api.placeBid !== 'function') {
          alert('La aplicaci√≥n a√∫n se est√° cargando. Por favor, espera un momento.');
          return;
        }
        
        const amount = parseFloat(amountInput.value);
        const currentPrice = parseFloat(auction.current_price);
        const minBid = currentPrice + 0.01;
        
        // Validaci√≥n
        if (isNaN(amount) || amount < minBid) {
          alert(`Por favor ingresa un monto v√°lido. El m√≠nimo es $${minBid.toFixed(2)}`);
          return;
        }
        
        bidButton.disabled = true;
        bidButton.innerHTML = '<span class="inline-flex items-center"><svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>Enviando...</span>';
        
        try {
          console.log('üì§ Enviando oferta:', { amount });
          console.log('üîß API object:', api);
          console.log('üîß placeBid method:', typeof api?.placeBid);
          
          if (!api || typeof api.placeBid !== 'function') {
            throw new Error('API no est√° disponible o placeBid no es una funci√≥n');
          }
          
          const response = await api.placeBid(auction.id, amount);
          
          console.log('‚úÖ Oferta enviada exitosamente:', response);
          alert('¬°Oferta enviada exitosamente!');
          
          // Limpiar formulario
          amountInput.value = '';
          
          // Actualizar precio local
          auction.current_price = amount;
          updateCurrentPrice(amount);
          
          // Mostrar mensaje en el chat
          const user = $user.get();
          addSystemMessage(`Has hecho una oferta de $${amount.toLocaleString()}`);
          
        } catch (error) {
          console.error('Error sending bid:', error);
          alert('Error al enviar la oferta: ' + (error.message || 'Error desconocido'));
        } finally {
          bidButton.disabled = false;
          bidButton.innerHTML = '<span id="bid-button-text">Ofertar</span>';
        }
      });
    }

    // Message form handler
    const messageForm = document.getElementById('message-form');
    if (messageForm) {
      messageForm.addEventListener('submit', (e) => {
        e.preventDefault();
        
        const messageInput = document.getElementById('message-input');
        if (!messageInput || !chatSocket || !isConnected) {
          alert('No hay conexi√≥n al servidor. Por favor, recarga la p√°gina.');
          return;
        }
        
        const message = messageInput.value.trim();
        if (!message) return;
        
        try {
          console.log('üì§ Enviando mensaje:', {
            auctionId: auction.id,
            message: message
          });
          
          chatSocket.emit('send_message', {
            auctionId: auction.id,
            message: message
          });
          
          messageInput.value = '';
        } catch (error) {
          console.error('Error sending message:', error);
          alert('Error al enviar mensaje: ' + error.message);
        }
      });
    }
  });

  // Cleanup on page unload
  window.addEventListener('beforeunload', () => {
    if (chatSocket) {
      chatSocket.emit('leave_chat_room', { auctionId: auction.id });
      chatSocket.disconnect();
    }
    if (auctionSocket) {
      auctionSocket.disconnect();
    }
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>