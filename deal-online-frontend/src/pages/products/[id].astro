---
import Layout from "../../layouts/Layout.astro";
import Header from "../../components/Header.astro";
import { api } from "../../services/api.js";

export async function getStaticPaths() {
  try {
    const response = await api.getAllProducts({ limit: 1000 });
    const products = response.products || [];

    return products.map((product) => ({
      params: { id: product.id.toString() },
      props: { product },
    }));
  } catch (error) {
    console.error("Error generating static paths:", error);
    return [];
  }
}

const { id } = Astro.params;
const { product } = Astro.props;

let finalProduct = product;
let error = null;

if (!finalProduct) {
  try {
    finalProduct = await api.getProductById(id);
  } catch (err) {
    error = err.message;
  }
}

if (!finalProduct && !error) {
  return Astro.redirect("/404");
}
---

<Layout
  title={finalProduct
    ? `${finalProduct.name} - Deal Online`
    : "Producto no encontrado"}
>
  <Header />

  {
    error ? (
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12 text-center">
        <h1 class="text-2xl font-bold text-gray-900 mb-4">
          Error al cargar el producto
        </h1>
        <p class="text-gray-600 mb-6">{error}</p>
        <a href="/products" class="text-primary-600 hover:text-primary-500">
          ← Volver a productos
        </a>
      </div>
    ) : (
      <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <nav class="mb-8">
          <ol class="flex items-center space-x-2 text-sm text-gray-500">
            <li>
              <a href="/" class="hover:text-gray-700">
                Inicio
              </a>
            </li>
            <li>
              <span>→</span>
            </li>
            <li>
              <a href="/products" class="hover:text-gray-700">
                Productos
              </a>
            </li>
            <li>
              <span>→</span>
            </li>
            <li class="text-gray-900">{finalProduct.name}</li>
          </ol>
        </nav>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-12">
          <div class="space-y-4">
            <div class="aspect-square rounded-lg overflow-hidden bg-gray-100">
              <img
                src={
                  finalProduct.image_url ||
                  "https://images.pexels.com/photos/4465124/pexels-photo-4465124.jpeg?auto=compress&cs=tinysrgb&w=800"
                }
                alt={finalProduct.name}
                class="w-full h-full object-cover"
              />
            </div>
          </div>

          <div class="space-y-6">
            <div>
              <h1 class="text-3xl font-bold text-gray-900 mb-2">
                {finalProduct.name}
              </h1>
              <p class="text-gray-600 text-lg leading-relaxed">
                {finalProduct.description}
              </p>
            </div>

            <div class="border-t pt-6">
              <h3 class="text-sm font-medium text-gray-900 mb-2">Vendedor</h3>
              <div class="flex items-center space-x-3">
                <div class="w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center">
                  <span class="text-sm font-medium text-gray-700">
                    {finalProduct.seller?.nombre?.charAt(0).toUpperCase() ||
                      "U"}
                  </span>
                </div>
                <div>
                  <p class="font-medium text-gray-900">
                    {finalProduct.seller?.nombre || "Usuario"}
                  </p>
                  <p class="text-sm text-gray-500">
                    Miembro desde{" "}
                    {new Date(
                      finalProduct.seller?.createdAt || Date.now(),
                    ).getFullYear()}
                  </p>
                </div>
              </div>
            </div>

            {finalProduct.auction ? (
              <div id="auction-section" class="border-t pt-6">
                <div class="bg-gradient-to-r from-primary-50 to-accent-50 rounded-lg p-6">
                  <div class="flex items-center justify-between mb-4">
                    <h3 class="text-xl font-semibold text-gray-900">
                      Subasta Activa
                    </h3>
                    <span
                      class={`px-3 py-1 rounded-full text-sm font-medium ${
                        finalProduct.auction.status === "active"
                          ? "bg-success-100 text-success-800"
                          : "bg-gray-100 text-gray-800"
                      }`}
                    >
                      {finalProduct.auction.status === "active"
                        ? "Activa"
                        : "Finalizada"}
                    </span>
                  </div>

                  <div class="grid grid-cols-2 gap-4 mb-6">
                    <div>
                      <p class="text-sm text-gray-600">Precio actual</p>
                      <p class="text-2xl font-bold text-primary-600">
                        ${parseFloat(finalProduct.auction.current_price).toLocaleString()}
                      </p>
                    </div>
                    <div>
                      <p class="text-sm text-gray-600">Tiempo restante</p>
                      <p
                        id="countdown"
                        class="text-lg font-semibold text-gray-900"
                      />
                    </div>
                  </div>

                  {finalProduct.auction.status === "active" && (
                    <div class="text-center">
                      <a
                        href={`/chat/${finalProduct.auction.id}`}
                        class="inline-block w-full bg-primary-500 text-white py-3 px-4 rounded-lg hover:bg-primary-600 transition-colors font-medium text-center"
                      >
                        Hacer Oferta
                      </a>
                    </div>
                  )}
                </div>
              </div>
            ) : (
              <div class="border-t pt-6">
                <div class="bg-gray-50 rounded-lg p-6 text-center">
                  <p class="text-gray-600">
                    Este producto no tiene una subasta activa
                  </p>
                </div>
              </div>
            )}

            {finalProduct.auction?.bids &&
              finalProduct.auction.bids.length > 0 && (
                <div class="border-t pt-6">
                  <h3 class="text-lg font-semibold text-gray-900 mb-4">
                    Historial de Ofertas
                  </h3>
                  <div class="space-y-3 max-h-64 overflow-y-auto">
                    {finalProduct.auction.bids.map((bid) => (
                      <div
                        class="flex items-center justify-between p-3 bg-gray-50 rounded-lg"
                        key={bid.id}
                      >
                        <div class="flex items-center space-x-3">
                          <div class="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
                            <span class="text-xs font-medium text-gray-700">
                              {bid.bidder?.nombre?.charAt(0).toUpperCase() ||
                                "U"}
                            </span>
                          </div>
                          <div>
                            <p class="font-medium text-gray-900">
                              {bid.bidder?.nombre || "Usuario"}
                            </p>
                            {bid.message && (
                              <p class="text-sm text-gray-600">
                                "{bid.message}"
                              </p>
                            )}
                          </div>
                        </div>
                        <div class="text-right">
                          <p class="font-bold text-primary-600">
                            ${bid.amount.toLocaleString()}
                          </p>
                          <p class="text-xs text-gray-500">
                            {new Date(bid.createdAt).toLocaleDateString()}{" "}
                            {new Date(bid.createdAt).toLocaleTimeString()}
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
          </div>
        </div>
      </div>
    )
  }
</Layout>

<script define:vars={{ finalProduct }}>
  // Update countdown timer for auction
  function updateCountdown() {
    if (!finalProduct.auction) return;

    const endTime = new Date(finalProduct.auction.end_time);
    const now = new Date();
    const diff = endTime.getTime() - now.getTime();

    const countdownEl = document.getElementById("countdown");
    const statusEl = document.querySelector("#auction-section .rounded-full");
    const offerButton = document.querySelector("#auction-section a[href*='/chat/']");
    
    if (!countdownEl) return;

    if (diff <= 0) {
      // Subasta finalizada
      countdownEl.textContent = "Subasta finalizada";
      countdownEl.className = "text-lg font-semibold text-error-600";
      
      // Actualizar estado visual
      if (statusEl) {
        statusEl.className = "px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800";
        statusEl.textContent = "Finalizada";
      }
      
      // Ocultar botón de oferta
      if (offerButton) {
        offerButton.style.display = "none";
      }
      
      // Actualizar el estado interno
      finalProduct.auction.status = "expired";
      return;
    }

    // Subasta activa
    const totalHours = Math.floor(diff / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((diff % (1000 * 60)) / 1000);

    const timeString = `${totalHours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    
    countdownEl.textContent = timeString;
    
    if (totalHours < 1) {
      countdownEl.className = "text-lg font-semibold text-error-600 animate-pulse";
    } else {
      countdownEl.className = "text-lg font-semibold text-gray-900";
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    if (finalProduct.auction && finalProduct.auction.status === "active") {
      updateCountdown();
      setInterval(updateCountdown, 1000);
    }
  });
</script>